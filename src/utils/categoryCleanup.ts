
import supabase from '@/lib/supabase';
import { mapCategory } from './csvUtils';

export interface CategoryCleanupResult {
  totalUpdated: number;
  categoryStats: Record<string, number>;
  errors: string[];
}

export const cleanupExistingCategories = async (): Promise<CategoryCleanupResult> => {
  const errors: string[] = [];
  let totalUpdated = 0;
  const categoryStats: Record<string, number> = {};

  try {
    console.log('üßπ D√©marrage du nettoyage des cat√©gories...');

    // R√©cup√©rer tous les aliments avec des cat√©gories √† nettoyer
    const { data: foods, error: fetchError } = await supabase
      .from('foods')
      .select('id, name, category')
      .or('category.eq.snacks,category.eq.fats')
      .limit(1000);

    if (fetchError) {
      errors.push(`Erreur lors de la r√©cup√©ration: ${fetchError.message}`);
      return { totalUpdated: 0, categoryStats, errors };
    }

    if (!foods || foods.length === 0) {
      console.log('‚úÖ Aucun aliment √† nettoyer trouv√©');
      return { totalUpdated: 0, categoryStats, errors };
    }

    console.log(`üìä ${foods.length} aliments √† analyser`);

    // Traiter par batches
    const batchSize = 50;
    for (let i = 0; i < foods.length; i += batchSize) {
      const batch = foods.slice(i, i + batchSize);
      const updates = [];

      for (const food of batch) {
        // Essayer de deviner la cat√©gorie √† partir du nom
        const guessedCategory = guessCategoryFromName(food.name);
        if (guessedCategory && guessedCategory !== food.category) {
          updates.push({
            id: food.id,
            category: guessedCategory
          });
          categoryStats[guessedCategory] = (categoryStats[guessedCategory] || 0) + 1;
        }
      }

      if (updates.length > 0) {
        const { error: updateError } = await supabase
          .from('foods')
          .upsert(updates);

        if (updateError) {
          errors.push(`Erreur mise √† jour batch ${i}: ${updateError.message}`);
        } else {
          totalUpdated += updates.length;
          console.log(`‚úÖ Batch ${Math.floor(i/batchSize) + 1}: ${updates.length} aliments mis √† jour`);
        }
      }

      // Pause entre les batches
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('üìà Statistiques de nettoyage:', categoryStats);
    return { totalUpdated, categoryStats, errors };

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
    errors.push(errorMessage);
    return { totalUpdated, categoryStats, errors };
  }
};

const guessCategory = (name: string): string => {
  const lowerName = name.toLowerCase();
  
  // Fruits
  if (lowerName.includes('pomme') || lowerName.includes('poire') || lowerName.includes('banane') ||
      lowerName.includes('orange') || lowerName.includes('citron') || lowerName.includes('raisin') ||
      lowerName.includes('fraise') || lowerName.includes('cerise') || lowerName.includes('abricot') ||
      lowerName.includes('p√™che') || lowerName.includes('prune') || lowerName.includes('ananas') ||
      lowerName.includes('mangue') || lowerName.includes('kiwi') || lowerName.includes('melon')) {
    return 'fruits';
  }
  
  // L√©gumes
  if (lowerName.includes('carotte') || lowerName.includes('tomate') || lowerName.includes('salade') ||
      lowerName.includes('√©pinard') || lowerName.includes('courgette') || lowerName.includes('brocoli') ||
      lowerName.includes('chou') || lowerName.includes('poivron') || lowerName.includes('concombre') ||
      lowerName.includes('radis') || lowerName.includes('betterave') || lowerName.includes('navet') ||
      lowerName.includes('pomme de terre') || lowerName.includes('patate')) {
    return 'vegetables';
  }
  
  // Prot√©ines
  if (lowerName.includes('viande') || lowerName.includes('b≈ìuf') || lowerName.includes('porc') ||
      lowerName.includes('agneau') || lowerName.includes('poulet') || lowerName.includes('dinde') ||
      lowerName.includes('poisson') || lowerName.includes('saumon') || lowerName.includes('thon') ||
      lowerName.includes('≈ìuf') || lowerName.includes('oeuf') || lowerName.includes('lentille') ||
      lowerName.includes('haricot') || lowerName.includes('pois chiche')) {
    return 'proteins';
  }
  
  // Produits laitiers
  if (lowerName.includes('lait') || lowerName.includes('fromage') || lowerName.includes('yaourt') ||
      lowerName.includes('yogurt') || lowerName.includes('beurre') || lowerName.includes('cr√®me')) {
    return 'dairy';
  }
  
  // C√©r√©ales
  if (lowerName.includes('pain') || lowerName.includes('riz') || lowerName.includes('p√¢tes') ||
      lowerName.includes('bl√©') || lowerName.includes('avoine') || lowerName.includes('quinoa') ||
      lowerName.includes('c√©r√©ale') || lowerName.includes('farine')) {
    return 'grains';
  }
  
  // Huiles et graisses
  if (lowerName.includes('huile') || lowerName.includes('olive') || lowerName.includes('margarine')) {
    return 'fats';
  }
  
  return 'snacks'; // Par d√©faut
};

// Version am√©lior√©e qui utilise le mapping existant
const guessCategoryFromName = (name: string): string => {
  // D'abord essayer la logique simple
  let category = guessCategory(name);
  
  // Si c'est encore "snacks", essayer avec des mots-cl√©s plus sp√©cifiques
  if (category === 'snacks') {
    const lowerName = name.toLowerCase();
    
    // Recherche de mots-cl√©s dans le nom pour deviner la cat√©gorie
    const keywords = {
      'fruits': ['fruit', 'jus de fruit', 'compote', 'confiture'],
      'vegetables': ['l√©gume', 'soupe de l√©gume', 'pur√©e de l√©gume'],
      'proteins': ['prot√©ine', 'viande', 'poisson'],
      'dairy': ['lactique', 'lact√©'],
      'grains': ['f√©culent', 'c√©r√©ale'],
      'fats': ['gras', 'lipide']
    };
    
    for (const [cat, words] of Object.entries(keywords)) {
      if (words.some(word => lowerName.includes(word))) {
        category = cat;
        break;
      }
    }
  }
  
  return category;
};
